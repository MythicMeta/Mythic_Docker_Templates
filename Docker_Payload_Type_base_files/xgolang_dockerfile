# Go cross compiler (xgo): Base cross-compilation layer
# Copyright (c) 2014 Péter Szilágyi. All rights reserved.
#
# Released under the MIT license.
# pulled and modified from https://github.com/karalabe/xgo/blob/master/docker/go-1.13.4/Dockerfile

FROM ubuntu:18.04
# Mark the image as xgo enabled to support xgo-in-xgo

ARG CA_CERTIFICATE
ARG NPM_REGISTRY
ARG PYPI_INDEX
ARG PYPI_INDEX_URL
ARG DOCKER_REGISTRY_MIRROR
ARG HTTP_PROXY
ARG HTTPS_PROXY

ENV XGO_IN_XGO 1

# Configure the Go environment, since it's not going to change
ENV PATH   /usr/local/go/bin:$PATH
ENV GOPATH /go


# Inject the remote file fetcher and checksum verifier
ADD fetch.sh /fetch.sh
ENV FETCH /fetch.sh
RUN chmod +x $FETCH


# Make sure apt-get is up to date and dependent packages are installed
RUN \
  apt-get update && \
  apt-get install -y automake autogen build-essential ca-certificates cmake                   \
    gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu libc6-dev-arm64-cross                \
    gcc-5-multilib g++-5-multilib  \
    libtool libxml2-dev uuid-dev libssl-dev swig openjdk-8-jdk pkg-config patch          \
    make xz-utils cpio wget zip unzip p7zip git mercurial bzr texinfo help2man python3.8 python3.8-distutils python3-pip python3.8-dev         \
    clang-9 clang-9++ llvm-dev libtool libxml2-dev uuid-dev libssl-dev swig openjdk-8-jdk pkg-config patch libssl1.1 openssl && \
    update-ca-certificates && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
  find /var/log -type f | while read f; do echo -ne '' > $f; done;

# Fix any stock package issues
RUN ln -s /usr/include/asm-generic /usr/include/asm
RUN ln -s /usr/bin/clang-9 /usr/bin/clang
RUN ln -s /usr/bin/clang-9 /usr/bin/clang++

##########################
# Darwin Toolchain build #
##########################

# Configure the container for OSX cross compilation
ENV OSX_SDK MacOSX11.1.sdk
ENV OSX_SDK_PATH https://github.com/phracker/MacOSX-SDKs/releases/download/11.0-11.1/${OSX_SDK}.tar.xz

# Make libxar known to the ld64 and cctools build
ENV LD_LIBRARY_PATH=/osxcross/target/lib

# Download the osx sdk and build the osx toolchain
# We download the osx sdk, patch it and pack it again to be able to throw the patched version at osxcross
RUN \
  $FETCH $OSX_SDK_PATH 9b86eab03176c56bb526de30daa50fa819937c54b280364784ce431885341bf6 && \
  tar -xf `basename $OSX_SDK_PATH` && rm -f `basename $OSX_SDK_PATH`
ADD patch.tar.xz $OSX_SDK/usr/include/c++
RUN tar -cf - $OSX_SDK/ | xz -c - > $OSX_SDK.tar.xz && rm -rf $OSX_SDK

# Actually build the toolchain
RUN \
  git clone https://github.com/tpoechtrager/osxcross.git && \
#  cd osxcross && git checkout 0f87f567dfaf98460244471ad6c0f4311d62079c && cd ../ && \
  mv $OSX_SDK.tar.xz /osxcross/tarballs/ && \
  OSX_VERSION_MIN=10.12 UNATTENDED=1 LD_LIBRARY_PATH=/osxcross/target/lib /osxcross/build.sh

ENV PATH /osxcross/target/bin:$PATH

# Inject the new Go root distribution downloader and bootstrapper
ADD bootstrap_pure.sh /bootstrap_pure.sh
ENV BOOTSTRAP_PURE /bootstrap_pure.sh
RUN chmod +x $BOOTSTRAP_PURE

# Inject the container entry point, the build script
ADD build.sh /build.sh
ENV BUILD /build.sh
RUN chmod +x $BUILD

ENV GO_VERSION 1178
# Make libxar known to the ld64 and cctools build
ENV LD_LIBRARY_PATH=/osxcross/target/lib

RUN \
  export ROOT_DIST=https://go.dev/dl/go1.17.8.linux-amd64.tar.gz    && \
  export ROOT_DIST_SHA=980e65a863377e69fd9b67df9d8395fd8e93858e7a24c9f55803421e453f4f99 && \
  \
  $BOOTSTRAP_PURE

ENV GOROOT /usr/local/go
ENV GOPATH /go/src:/go/src/poseidon

#RUN go install github.com/google/shlex@latest \
#    github.com/kbinani/screenshot@latest \
#    github.com/tmc/scp@latest \
#    github.com/xorrior/keyctl@latest \
#    golang.org/x/crypto/ssh@latest \
#    golang.org/x/sync/semaphore@latest \
#    github.com/gorilla/websocket@latest \
#    github.com/djherbis/atime@latest \
#    github.com/google/uuid@latest \
#    golang.org/x/sys/unix@latest

RUN python3.8 -m pip install pip wheel setuptools
COPY ["requirements.txt", "/requirements.txt"]
RUN python3.8 -m pip install -r /requirements.txt

# Download Garble
RUN go install mvdan.cc/garble@latest

ENTRYPOINT ["/Mythic/mythic/payload_service.sh"]
